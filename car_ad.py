import mysql.connector
from mysql.connector import Error

class CarAd:
    def __init__(self, title, original_pub_date, original_url, local_url, scraped_date, carBrand, carModel, year,
                 currentMiles, carType, energy, country, price, gearbox, wd, is_available=1):
        self.id = None  # Auto-generated by MySQL
        self.title = title
        self.original_pub_date = original_pub_date
        self.original_url = original_url
        self.local_url = local_url
        self.scraped_date = scraped_date
        self.carBrand = carBrand
        self.carModel = carModel
        self.year = year
        self.currentMiles = currentMiles
        self.carType = carType
        self.energy = energy
        self.country = country
        self.price = price
        self.gearbox = gearbox
        self.wd = wd
        self.is_available = is_available

    # Getters and setters
    def get_id(self): return self.id
    def set_id(self, id): self.id = id
    
    def get_title(self): return self.title
    def set_title(self, title): self.title = title
    
    def get_original_pub_date(self): return self.original_pub_date
    def set_original_pub_date(self, original_pub_date): self.original_pub_date = original_pub_date
    
    def get_original_url(self): return self.original_url
    def set_original_url(self, original_url): self.original_url = original_url
    
    def get_local_url(self): return self.local_url
    def set_local_url(self, local_url): self.local_url = local_url
    
    def get_scraped_date(self): return self.scraped_date
    def set_scraped_date(self, scraped_date): self.scraped_date = scraped_date
    
    def get_carBrand(self): return self.carBrand
    def set_carBrand(self, carBrand): self.carBrand = carBrand
    
    def get_carModel(self): return self.carModel
    def set_carModel(self, carModel): self.carModel = carModel
    
    def get_year(self): return self.year
    def set_year(self, year): self.year = year
    
    def get_currentMiles(self): return self.currentMiles
    def set_currentMiles(self, currentMiles): self.currentMiles = currentMiles
    
    def get_carType(self): return self.carType
    def set_carType(self, carType): self.carType = carType
    
    def get_energy(self): return self.energy
    def set_energy(self, energy): self.energy = energy
    
    def get_country(self): return self.country
    def set_country(self, country): self.country = country
    
    def get_price(self): return self.price
    def set_price(self, price): self.price = price
    
    def get_gearbox(self): return self.gearbox
    def set_gearbox(self, gearbox): self.gearbox = gearbox
    
    def get_wd(self): return self.wd
    def set_wd(self, wd): self.wd = wd
    
    def get_is_available(self): return self.is_available
    def set_is_available(self, is_available): self.is_available = is_available
    
    def __str__(self):
        return f"CarAd({self.id}, {self.title}, {self.carBrand}, {self.carModel}, {self.year}, {self.price} USD)"

    
    def insert_into_db(car_ad, host, user, password, database):
        try:
            connection = mysql.connector.connect(
                host=host,
                user=user,
                password=password,
                database=database
            )
            cursor = connection.cursor()
            query = """
            INSERT INTO carads (title, original_pub_date, original_url, local_url, scraped_date, carBrand, carModel, 
            year, currentMiles, carType, energy, country, price, gearbox, wd, is_available) 
            VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)
            """
            values = (car_ad.title, car_ad.original_pub_date, car_ad.original_url, car_ad.local_url,
                      car_ad.scraped_date, car_ad.carBrand, car_ad.carModel, car_ad.year, car_ad.currentMiles,
                      car_ad.carType, car_ad.energy, car_ad.country, car_ad.price, car_ad.gearbox, car_ad.wd,
                      car_ad.is_available)
            cursor.execute(query, values)
            connection.commit()
            car_ad.set_id(cursor.lastrowid)
            print(f"Car ad inserted successfully with ID {car_ad.get_id()}.")
        except Error as e:
            print(f"Error: {e}")
        finally:
            if connection.is_connected():
                cursor.close()
                connection.close()
                print("MySQL connection closed.")


